#!/usr/bin/env bash

set -e -o nounset

if test $# -ge 1 && test -x "$(which $1 2>&-)" ; then
  exec "$@"
elif test $# -ge 1 ; then
  echo "=== [$0] err: command not found: $1 (full command: $@)"
  exit 1
elif ps -ef | egrep -v 'grep|openvpn.sh' | grep -q openvpn ; then
  echo "=== [$0] inf: service already running, please restart container to apply changes"
  exit 0
fi

test -f ${OVPN_CONF} || { echo "=== [$0] err: file defined by passed variable OVPN_CONF (${OVPN_CONF}) doesn't exist" ; exit 1 ; }
touch ${RESP_FILE} 2>&- || { echo "=== [$0] err: cannot touch file defined by passed variable RESP_FILE (${RESP_FILE}) doesn't exist" ; exit 1 ; }
test -n "${SAML_USER}" || { echo "=== [$0] err: passed variable SAML_USER is empty" ; exit 1 ; }
test -n "${SAML_PASS}" || { echo "=== [$0] err: passed variable SAML_USER is empty" ; exit 1 ; }

HOST=$(cat ${OVPN_CONF} | grep ^remote | head -n1 | cut -d" " -f2)
PORT=$(cat ${OVPN_CONF} | grep ^remote | head -n1 | cut -d" " -f3)
PROTO=$(cat ${OVPN_CONF} | grep ^proto | head -n1 | cut -d" " -f2)
RAND=$(openssl rand -hex 12)
IP=$(dig a +short "${RAND}.${HOST}" | head -n1)

sed \
    -e '/^proto .*/d' \
    -e '/^remote .*/d' \
    -e '/^remote-random-hostname.*/d' \
    -e '/^resolv-retry infinite.*/d' \
    -e '/^auth-user-pass.*/d' \
    -e '/^auth-federate.*/d' \
    -e '/^auth-retry interact.*/d' \
    -e '/^nobind.*/a persist-key\npersist-tun\ntls-client\nresolv-retry 30\nkeepalive 10 60' \
    ${OVPN_CONF} > ${OVPN_CONF}-${IP}

#   -e '/^nobind.*/a persist-key\npersist-tun\ntls-client\nresolv-retry 30\nkeepalive 10 60\ncompress lz4' \

echo "=== [$0] log: getting SAML request..."
/app/getauth ${IP} ${PROTO} ${PORT} ${SAML_USER} ${SAML_PASS} ${OVPN_CONF} ${RESP_FILE} || { 
  echo "=== [$0] err: script /app/get-auth failed with code $?"
  exit 1
}

test -s ${RESP_FILE}.cred || { echo "=== [$0] err: received SAML response file doesn't exist or empty" ; exit 1 ; }

ovpn_args=(
  "--config" "${OVPN_CONF}-${IP}"
  "--proto" "$PROTO"
  "--remote" "${IP}" "${PORT}"
  "--script-security" "2"
  "--inactive" "3600"
  "--down" "'/app/getauth ${IP} ${PROTO} ${PORT} ${SAML_USER} ${SAML_PASS} ${OVPN_CONF} ${RESP_FILE}'"
  "--up-restart"
  "--auth-user-pass" "${RESP_FILE}.cred"
)

# "--route-up" "/usr/bin/env rm -f ${RESP_FILE} ${RESP_FILE}.cred"
# "--up" "/usr/bin/env rm -f ${RESP_FILE} ${RESP_FILE}.cred"

test "${DNS:-true}" != "true" || { 
  echo "=== [$0] log: using server-side DNS"
  ovpn_args+=(
    "--route-up" "/etc/openvpn/client.up"
    "--route-pre-down" "/etc/openvpn/client.down"
  )
}

! test -n "${MSS:-}" -a "${PROTO}" = "udp" || { 
  echo "=== [$0] log: set internal datagram fragmentation to: $MSS"
  ovpn_args+=(
    "--fragment $MSS --mssfix"
  )
}

! grep -Eq "^[0-9]+$" <(echo "${GROUPID:-}") || {
  echo "=== [$0] log: GID for 'vpn' group is chnaged to ${GROUPID}"
  groupmod -g ${GROUPID} -o vpn
}

mkdir -p /dev/net
test -c /dev/net/tun || mknod -m 0666 /dev/net/tun c 10 200
echo "=== [$0] log: running openvpn client"
set -x
exec sg vpn -c "openvpn ${ovpn_args[*]}"
